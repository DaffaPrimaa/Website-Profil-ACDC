name: Deploy & Audit Website

on:
  push:
    branches:
      - main
      - daffa

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      deploy-url: ${{ steps.vercel_deploy.outputs.deploy-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel
        id: vercel_deploy
        run: |
          echo "Deploying to Vercel..."
          
          # Set deployment command based on branch
          if [ "${GITHUB_REF##*/}" = "main" ]; then
            echo "Deploying to production..."
            DEPLOY_OUTPUT=$(vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --confirm 2>&1)
          else
            echo "Deploying preview for branch: ${GITHUB_REF##*/}"
            DEPLOY_OUTPUT=$(vercel --token=${{ secrets.VERCEL_TOKEN }} --confirm 2>&1)
          fi
          
          # Extract URL from output - Vercel typically outputs the URL at the end
          DEPLOY_URL=$(echo "$DEPLOY_OUTPUT" | grep -E "https://.*\.vercel\.app" | tail -1 | tr -d '[:space:]')
          
          # Fallback: try to extract any https URL if the above doesn't work
          if [ -z "$DEPLOY_URL" ]; then
            DEPLOY_URL=$(echo "$DEPLOY_OUTPUT" | grep -oE "https://[a-zA-Z0-9.-]+\.vercel\.app[a-zA-Z0-9./?=_-]*" | head -1)
          fi
          
          # Validate URL format
          if [[ "$DEPLOY_URL" =~ ^https://.*\.vercel\.app.* ]]; then
            echo "‚úÖ Deployment successful!"
            echo "üåê URL: $DEPLOY_URL"
            echo "deploy-url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Failed to extract valid deployment URL"
            echo "Raw output:"
            echo "$DEPLOY_OUTPUT"
            exit 1
          fi
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

  lighthouse:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Wait for deployment
        run: |
          echo "Waiting 30 seconds for deployment to be ready..."
          sleep 30

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Run Lighthouse CI
        run: |
          DEPLOY_URL="${{ needs.deploy.outputs.deploy-url }}"
          echo "üîç Running Lighthouse audit on: $DEPLOY_URL"
          
          if [ -z "$DEPLOY_URL" ]; then
            echo "‚ùå No deployment URL available"
            exit 1
          fi
          
          # Test if URL is accessible
          if curl -f -s "$DEPLOY_URL" > /dev/null; then
            echo "‚úÖ URL is accessible, running Lighthouse..."
            lhci collect --url="$DEPLOY_URL" || echo "‚ö†Ô∏è Lighthouse collect failed"
            lhci assert || echo "‚ö†Ô∏è Lighthouse assertions failed"
            lhci upload || echo "‚ö†Ô∏è Lighthouse upload failed"
          else
            echo "‚ùå URL is not accessible yet"
            exit 1
          fi