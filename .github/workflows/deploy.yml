name: Deploy & Audit Website

on:
  push:
    branches:
      - main
      - daffa

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      deploy-url: ${{ steps.set_url.outputs.deploy-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel
        run: |
          echo "Deploying to Vercel..."
          if [ "${GITHUB_REF##*/}" = "main" ]; then
            echo "Deploying to production..."
            vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --confirm > deploy_output.txt 2>&1
          else
            echo "Deploying preview for branch: ${GITHUB_REF##*/}"
            vercel --token=${{ secrets.VERCEL_TOKEN }} --confirm > deploy_output.txt 2>&1
          fi
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: Extract deployment URL
        id: set_url
        run: |
          echo "Extracting URL from deployment output..."
          
          # Show raw output for debugging
          echo "=== Raw Vercel Output ==="
          cat deploy_output.txt
          echo "========================="
          
          # Extract URL using multiple methods
          DEPLOY_URL=""
          
          # Method 1: Look for https://...vercel.app pattern
          DEPLOY_URL=$(grep -oE "https://[a-zA-Z0-9.-]+\.vercel\.app" deploy_output.txt | head -1 || echo "")
          
          # Method 2: If not found, try broader pattern
          if [ -z "$DEPLOY_URL" ]; then
            DEPLOY_URL=$(grep -oE "https://[a-zA-Z0-9.-]+\.vercel\.app[a-zA-Z0-9./?=_-]*" deploy_output.txt | head -1 || echo "")
          fi
          
          # Method 3: Look for any vercel.app URL
          if [ -z "$DEPLOY_URL" ]; then
            DEPLOY_URL=$(grep -oE "[a-zA-Z0-9.-]+\.vercel\.app" deploy_output.txt | head -1 || echo "")
            if [ -n "$DEPLOY_URL" ]; then
              DEPLOY_URL="https://$DEPLOY_URL"
            fi
          fi
          
          echo "Extracted URL: '$DEPLOY_URL'"
          
          if [ -n "$DEPLOY_URL" ]; then
            echo "‚úÖ Deployment successful!"
            echo "üåê URL: $DEPLOY_URL"
            echo "deploy-url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Could not extract deployment URL"
            echo "Full output content:"
            cat deploy_output.txt
            exit 1
          fi

      - name: Cleanup
        run: rm -f deploy_output.txt

  lighthouse:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Wait for deployment
        run: |
          echo "Waiting 30 seconds for deployment to be ready..."
          sleep 30

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Verify deployment URL
        run: |
          DEPLOY_URL="${{ needs.deploy.outputs.deploy-url }}"
          echo "üîç Testing URL: $DEPLOY_URL"
          
          if [ -z "$DEPLOY_URL" ]; then
            echo "‚ùå No deployment URL received"
            exit 1
          fi
          
          # Test if URL responds
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOY_URL" || echo "000")
          echo "HTTP Status: $HTTP_STATUS"
          
          if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 400 ]; then
            echo "‚úÖ URL is accessible"
          else
            echo "‚ö†Ô∏è URL returned status $HTTP_STATUS, but continuing with Lighthouse..."
          fi

      - name: Run Lighthouse CI
        run: |
          DEPLOY_URL="${{ needs.deploy.outputs.deploy-url }}"
          echo "üîç Running Lighthouse audit on: $DEPLOY_URL"
          
          # Run Lighthouse with error handling
          lhci collect --url="$DEPLOY_URL" || echo "‚ö†Ô∏è Lighthouse collect had issues but continuing..."
          lhci assert || echo "‚ö†Ô∏è Lighthouse assertions failed but continuing..."
          lhci upload || echo "‚ö†Ô∏è Lighthouse upload failed but continuing..."
          
          echo "‚úÖ Lighthouse audit completed"